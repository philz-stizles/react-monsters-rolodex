{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","console","log","item","className","src","id","alt","name","email","CardList","items","map","i","SearchBox","placeholder","onSearch","type","onChange","e","App","filterItems","searchValue","filter","toLowerCase","includes","state","monsters","handleSearch","bind","fetch","then","response","json","jsonData","setState","currentTarget","value","this","filteredItems","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qUAGaA,G,YAAO,SAACC,GACjBC,QAAQC,IAAIF,GADe,IAEnBG,EAASH,EAATG,KACR,OACI,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAAKG,GAA/B,2BAA4DC,IAAKJ,EAAKK,OAC9E,6BAAKL,EAAKK,OACV,4BAAIL,EAAKM,aCNRC,G,MAAW,SAACV,GAErB,OADAC,QAAQC,IAAIF,GAER,qBAAKI,UAAU,YAAf,SACKJ,EAAMW,MAAMC,KAAI,SAACT,EAAMU,GAAP,OAAa,cAAC,EAAD,CAAcV,KAAMA,GAATU,UCLxCC,G,MAAY,SAAC,GAA6B,IAA5BC,EAA2B,EAA3BA,YAAaC,EAAc,EAAdA,SACpC,OACI,uBAAOZ,UAAU,aAAaa,KAAK,SAASF,YAAaA,EAAaG,SAAU,SAAAC,GAAC,OAAIH,EAASG,QC8DvFC,E,kDA7Db,WAAYpB,GAAQ,IAAD,8BACjB,cAAMA,IA2BRqB,YAAc,SAACC,EAAaX,GAM1B,OALsBA,EAAMY,QAAO,SAAAV,GACjC,OAAOA,EAAEL,KAAKgB,cAAcC,SAASH,EAAYE,gBAC5CX,EAAEJ,MAAMe,cAAcC,SAASH,EAAYE,mBA7BlD,EAAKE,MAAQ,CACXC,SAAU,GACVL,YAAa,IAGf,EAAKM,aAAe,EAAKA,aAAaC,KAAlB,gBAPH,E,gEAUE,IAAD,OAClBC,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAAAG,GAAQ,OAAI,EAAKC,SAAL,2BACb,EAAKT,OADQ,IAEhBC,SAAUO,U,mCAKHf,GAAI,IAAD,OACdlB,QAAQC,IAAIiB,GACZlB,QAAQC,IAAIiB,EAAEiB,eAFA,IAGNC,EAAUlB,EAAEiB,cAAZC,MACRC,KAAKH,SAAS,CAAEb,YAAae,IAAS,kBAAMpC,QAAQC,IAAI,EAAKwB,Y,+BAarD,IAAD,EAC2BY,KAAKZ,MAA/BC,EADD,EACCA,SAAUL,EADX,EACWA,YACZiB,EAAgBD,KAAKjB,YAAYC,EAAaK,GAEpD,OACE,sBAAKvB,UAAU,MAAf,UACE,wBAAQA,UAAU,eAGlB,iCACE,gCACE,kDACA,cAAC,EAAD,CAAWW,YAAY,SAASC,SAAUsB,KAAKV,kBAEjD,cAAC,EAAD,CAAUjB,MAAO4B,OAGnB,kC,GAvDUC,IAAMC,WCOTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.2c2a7cfe.chunk.js","sourcesContent":["import React from 'react'\r\nimport './card.styles.css'\r\n\r\nexport const Card = (props) => {\r\n    console.log(props)\r\n    const { item } = props\r\n    return (\r\n        <div className=\"card-container\">\r\n            <img src={`https://robohash.org/${item.id}?set=set10&size=180x180`} alt={item.name}/>\r\n            <h2>{item.name}</h2>\r\n            <p>{item.email}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { Card } from './../card/card.component'\r\nimport './card-list.styles.css'\r\n\r\nexport const CardList = (props) => {\r\n    console.log(props)\r\n    return (\r\n        <div className=\"card-list\">\r\n            {props.items.map((item, i) => <Card key={i} item={item} />)}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport './search-box.styles.css'\r\n\r\nexport const SearchBox = ({placeholder, onSearch}) => {\r\n    return (\r\n        <input className=\"search-box\" type=\"search\" placeholder={placeholder} onChange={e => onSearch(e)} />\r\n    )\r\n}\r\n","import React from 'react'\nimport './App.css';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      monsters: [],\n      searchValue: ''\n    }\n\n    this.handleSearch = this.handleSearch.bind(this)\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then((response) => response.json())\n      .then(jsonData => this.setState({\n        ...this.state,\n        monsters: jsonData\n      }))\n  }\n\n  // Non-arrorw Functions require binding \"this\"\n  handleSearch(e) {\n    console.log(e)\n    console.log(e.currentTarget)\n    const { value } = e.currentTarget\n    this.setState({ searchValue: value }, () => console.log(this.state))\n  }\n\n  // Arrow Functions do not require binding \"this\"\n  filterItems = (searchValue, items) => {\n    const filteredItems = items.filter(i => {\n      return i.name.toLowerCase().includes(searchValue.toLowerCase()) \n        || i.email.toLowerCase().includes(searchValue.toLowerCase())\n    })\n\n    return filteredItems\n  }\n\n  render() {\n    const { monsters, searchValue } = this.state\n    const filteredItems = this.filterItems(searchValue, monsters)\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n        </header>\n  \n        <main>\n          <div>\n            <h1>Monsters Rolodex</h1>\n            <SearchBox placeholder=\"Search\" onSearch={this.handleSearch}/>\n          </div>\n          <CardList items={filteredItems}/>\n        </main>\n  \n        <footer>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}